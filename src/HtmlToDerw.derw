import "../derw-packages/derw-lang/stdlib/src/String" as String

import "../derw-packages/derw-lang/stdlib/src/List" as List

import "../derw-packages/derw-lang/stdlib/src/Maybe" exposing ( Maybe, Just )

exposing (lex, lexToString, Lexer, partition)

exposing (parse, Page, pageToString)

exposing (combineIdentifiers)

exposing (Identifier, Space)

exposing (generateDerw)

exposing (htmlToDerw)

type Lexer =
    OpenTag
    | Identifier { value: List string }
    | Space
    | Assign
    | Speech
    | CloseSlash
    | CloseTag

type alias GenericSplit a = {
    left: List a,
    right: List a
}

type alias Attribute = {
    name: string,
    value: string
}

type Page =
    Tag { name: string,
        children: List Page,
        attributes: List Attribute }
    | NormalString { value: List string }

type alias SiblingSplit = {
    upToNextSibling: List Lexer,
    nextSiblingOnWards: List Lexer
}

collectIdentifiers: List string -> List string -> GenericSplit string
collectIdentifiers str left =
    case str of
        [] ->
            {
                left: List.reverse left,
                right: [ ]
            }

        "<" :: rest ->
            {
                left: List.reverse left,
                right: str
            }

        "=" :: rest ->
            {
                left: List.reverse left,
                right: str
            }

        `"` :: rest ->
            {
                left: List.reverse left,
                right: str
            }

        ">" :: rest ->
            {
                left: List.reverse left,
                right: str
            }

        " " :: rest ->
            {
                left: List.reverse left,
                right: str
            }

        char :: rest ->
            collectIdentifiers rest (char :: left)

        default ->
            {
                left: [ ],
                right: [ ]
            }

lex: List string -> List Lexer
lex str =
    case str of
        "<" :: rest ->
            OpenTag :: lex rest

        "=" :: rest ->
            Assign :: lex rest

        `"` :: rest ->
            Speech :: lex rest

        ">" :: rest ->
            CloseTag :: lex rest

        "/" :: rest ->
            CloseSlash :: lex rest

        " " :: rest ->
            Space :: lex rest

        char :: rest ->
            let
                splited: GenericSplit string
                splited =
                    collectIdentifiers str [ ]
            in
                Identifier { value: splited.left } :: lex splited.right

        default ->
            [ ]

splitOnSibling: number -> string -> List Lexer -> SiblingSplit -> SiblingSplit
splitOnSibling depth rootTagName xs progress =
    case xs of
        OpenTag :: Identifier { value } :: rest ->
            let
                upToClose: GenericSplit Lexer
                upToClose =
                    splitOnCloseTag rest

                currentElement: List Lexer
                currentElement =
                    OpenTag :: Identifier { value: value } :: upToClose.left

                upToNextSibling: List Lexer
                upToNextSibling =
                    List.append progress.upToNextSibling currentElement

                newDepth: number
                newDepth =
                    if String.join "" value == rootTagName then
                        depth + 1
                    else
                        depth
            in
                splitOnSibling newDepth rootTagName upToClose.right {
                    upToNextSibling: upToNextSibling,
                    nextSiblingOnWards: [ ]
                }

        OpenTag :: CloseSlash :: Identifier { value } :: CloseTag :: rest ->
            let
                currentElement: List Lexer
                currentElement =
                    OpenTag :: CloseSlash :: Identifier { value: value } :: CloseTag :: [ ]

                upToNextSibling: List Lexer
                upToNextSibling =
                    List.append progress.upToNextSibling currentElement
            in
                if depth == 1 then
                    {
                        upToNextSibling: upToNextSibling,
                        nextSiblingOnWards: rest
                    }
                else
                    let
                        newDepth: number
                        newDepth =
                            if String.join "" value == rootTagName then
                                depth - 1
                            else
                                depth
                    in
                        splitOnSibling newDepth rootTagName rest {
                            upToNextSibling: upToNextSibling,
                            nextSiblingOnWards: [ ]
                        }

        elem :: rest ->
            let
                upToNextSibling: List Lexer
                upToNextSibling =
                    List.append progress.upToNextSibling [ elem ]
            in
                splitOnSibling depth rootTagName rest {
                    upToNextSibling: upToNextSibling,
                    nextSiblingOnWards: [ ]
                }

        default ->
            {
                upToNextSibling: [ ],
                nextSiblingOnWards: [ ]
            }

splitOnCloseTag: List Lexer -> GenericSplit Lexer
splitOnCloseTag xs =
    case xs of
        CloseTag :: rest ->
            {
                left: [ CloseTag ],
                right: rest
            }

        elem :: rest ->
            let
                onRest: GenericSplit Lexer
                onRest =
                    splitOnCloseTag rest
            in
                {
                    left: elem :: onRest.left,
                    right: onRest.right
                }

        default ->
            {
                left: [ ],
                right: [ ]
            }

partitionHelper: List Lexer -> List (List Lexer)
partitionHelper xs =
    case xs of
        OpenTag :: Identifier { value } :: rest ->
            let
                split: SiblingSplit
                split =
                    splitOnSibling 0 (String.join "" value) xs {
                        upToNextSibling: [ ],
                        nextSiblingOnWards: [ ]
                    }

                collected: List Lexer
                collected =
                    split.upToNextSibling
            in
                collected :: partitionHelper split.nextSiblingOnWards

        Identifier { value } :: rest ->
            let
                combined: GenericSplit Lexer
                combined =
                    combineIdentifiers rest

                joined: List Lexer
                joined =
                    Identifier { value: value } :: combined.left
            in
                joined :: partitionHelper combined.right

        Space :: rest ->
            let
                combined: GenericSplit Lexer
                combined =
                    combineIdentifiers rest

                joined: List Lexer
                joined =
                    Space :: combined.left
            in
                joined :: partitionHelper combined.right

        default ->
            [ ]

partition: List Lexer -> List (List Lexer)
partition xs =
    partitionHelper xs

dropClosingTag: List Lexer -> List Lexer
dropClosingTag xs =
    case xs of
        OpenTag :: CloseSlash :: Identifier { value } :: CloseTag :: [] ->
            [ ]

        head :: rest ->
            head :: dropClosingTag rest

        default ->
            [ ]

parseAttributes: List Lexer -> List Attribute
parseAttributes xs =
    case xs of
        Identifier { value } :: Assign :: Speech :: Identifier { value: other } :: Speech :: rest ->
            let
                attr: Attribute
                attr =
                    {
                        name: String.join "" value,
                        value: String.join "" other
                    }
            in
                attr :: parseAttributes rest

        Space :: rest ->
            parseAttributes rest

        default ->
            [ ]

parse: List Lexer -> Page
parse lexed =
    let
        partitioned: List (List Lexer)
        partitioned =
            partition lexed
    in
        case partitioned of
            [] ->
                Tag {
                    name: "html",
                    children: [ ],
                    attributes: [ ]
                }

            single :: [] ->
                case single of
                    OpenTag :: Identifier { value } :: rest ->
                        let
                            upToClose: GenericSplit Lexer
                            upToClose =
                                splitOnCloseTag rest

                            paritionedChildren: List Page
                            paritionedChildren =
                                dropClosingTag upToClose.right
                                    |> partition
                                    |> List.map parse

                            attributes: List Attribute
                            attributes =
                                parseAttributes upToClose.left
                        in
                            Tag {
                                name: String.join "" value,
                                children: paritionedChildren,
                                attributes: attributes
                            }

                    Identifier { value } :: rest ->
                        let
                            combined: GenericSplit Lexer
                            combined =
                                combineIdentifiers rest

                            lexed: List string
                            lexed =
                                lexToString combined.left
                        in
                            NormalString { value: List.append value lexed }

                    Space :: rest ->
                        let
                            combined: GenericSplit Lexer
                            combined =
                                combineIdentifiers rest

                            lexed: List string
                            lexed =
                                lexToString combined.left
                        in
                            NormalString { value: List.append [ " " ] lexed }

                    default ->
                        Tag {
                            name: "html",
                            children: [ ],
                            attributes: [ ]
                        }

            default ->
                Tag {
                    name: "html",
                    children: List.map parse partitioned,
                    attributes: [ ]
                }

lexToString: List Lexer -> List string
lexToString lexed =
    case lexed of
        OpenTag :: rest ->
            "<" :: lexToString rest

        Assign :: rest ->
            "=" :: lexToString rest

        Speech :: rest ->
            `"` :: lexToString rest

        CloseTag :: rest ->
            ">" :: lexToString rest

        CloseSlash :: rest ->
            "/" :: lexToString rest

        Space :: rest ->
            " " :: lexToString rest

        Identifier { value } :: rest ->
            String.join "" value :: lexToString rest

        default ->
            [ ]

attributeToString: Attribute -> string
attributeToString attribute =
    `${attribute.name}="${attribute.value}"`

pageToString: Page -> string
pageToString page =
    case page of
        NormalString { value } ->
            String.join "" value

        Tag { name, children, attributes } ->
            let
                contents: string
                contents =
                    String.join "" (List.map pageToString children)

                attrs: string
                attrs =
                    String.join " " (List.map attributeToString attributes)
            in
                case attributes of
                    [] ->
                        `<${name}>${contents}</${name}>`

                    default ->
                        `<${name} ${attrs}>${contents}</${name}>`

generateAttribute: Attribute -> string
generateAttribute attribute =
    `attribute "${attribute.name}" "${attribute.value}"`

combineIdentifiers: List Lexer -> GenericSplit Lexer
combineIdentifiers xs =
    case xs of
        Identifier { value } :: rest ->
            let
                splited: GenericSplit Lexer
                splited =
                    combineIdentifiers rest
            in
                {
                    left: Identifier { value: value } :: splited.left,
                    right: splited.right
                }

        Space :: rest ->
            let
                splited: GenericSplit Lexer
                splited =
                    combineIdentifiers rest
            in
                {
                    left: Space :: splited.left,
                    right: splited.right
                }

        default ->
            {
                left: [ ],
                right: xs
            }

generateDerw: Page -> string
generateDerw page =
    case page of
        NormalString { value } ->
            "text " + `"${String.join("", value)}"`

        Tag { name, children, attributes } ->
            let
                contents: string
                contents =
                    String.join ", " (List.map generateDerw children)

                attrs: string
                attrs =
                    String.join ", " (List.map generateAttribute attributes)
            in
                case attributes of
                    [] ->
                        `${name} [ ] [ ] [ ${contents} ]`

                    default ->
                        `${name} [ ] [ ${attrs} ] [ ${contents} ]`

htmlToDerw: string -> string
htmlToDerw input =
    String.split "" input
        |> lex
        |> parse
        |> generateDerw