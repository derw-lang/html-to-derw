import "../derw-packages/derw-lang/stdlib/src/Test" as Test
import "../derw-packages/derw-lang/stdlib/src/String" as String
import "../derw-packages/derw-lang/stdlib/src/List" as List

import "./HtmlToDerw" exposing (lex, lexToString, pageToString, parse, Page, Default, partition, generateDerw, combineIdentifiers, Identifier, Space)

testLexingDiv: boolean -> void
testLexingDiv =
    String.split "" "<div>Hello world</div>"
        |> lex
        |> lexToString
        |> String.join ""
        |> Test.equals "<div>Hello world</div>"

testLexingAttributeDiv: boolean -> void
testLexingAttributeDiv =
    String.split "" `<div class="navbar-brand">Hello world</div>`
        |> lex
        |> lexToString
        |> String.join ""
        |> Test.equals `<div class="navbar-brand">Hello world</div>`

testLexingNestedDiv: boolean -> void
testLexingNestedDiv =
    String.split "" "<div><div>Hello</div> <div>world</div></div>"
        |> lex
        |> lexToString
        |> String.join ""
        |> Test.equals "<div><div>Hello</div> <div>world</div></div>"

testPartitionDiv: boolean -> void
testPartitionDiv =
    String.split "" "<div>Hello world</div>"
        |> lex
        |> partition
        |> List.map lexToString
        |> List.map (\x -> String.join "" x)
        |> Test.equals [ "<div>Hello world</div>" ]


testPartitionAttributeDiv: boolean -> void
testPartitionAttributeDiv =
    String.split "" `<div class="navbar-brand">Hello world</div>`
        |> lex
        |> partition
        |> List.map lexToString
        |> List.map (\x -> String.join "" x)
        |> Test.equals [`<div class="navbar-brand">Hello world</div>`]


testPartitionSiblingDiv: boolean -> void
testPartitionSiblingDiv =
    String.split "" "<div>Hello</div><div>world</div>"
        |> lex
        |> partition
        |> List.map lexToString
        |> List.map (\x -> String.join "" x)
        |> Test.equals [ "<div>Hello</div>", "<div>world</div>" ]

testPartitionSiblingDivWithSpace: boolean -> void
testPartitionSiblingDivWithSpace =
    String.split "" "<div>Hello</div> <div>world</div>"
        |> lex
        |> partition
        |> List.map lexToString
        |> List.map (\x -> String.join "" x)
        |> Test.equals [ "<div>Hello</div>", " ", "<div>world</div>" ]

testPartitionSiblingDivWithText: boolean -> void
testPartitionSiblingDivWithText =
    String.split "" "<div>Hello</div>world"
        |> lex
        |> partition
        |> List.map lexToString
        |> List.map (\x -> String.join "" x)
        |> Test.equals [ "<div>Hello</div>", "world" ]

testPartitionNestedDiv: boolean -> void
testPartitionNestedDiv =
    String.split "" "<div><div>Hello</div><div>world</div></div>"
        |> lex
        |> partition
        |> List.map lexToString
        |> List.map (\x -> String.join "" x)
        |> Test.equals [ "<div><div>Hello</div><div>world</div></div>" ]

testParsingDiv: boolean -> void
testParsingDiv =
    String.split "" "<div>Hello world</div>"
        |> lex
        |> parse
        |> pageToString
        |> Test.equals "<div>Hello world</div>"

testParsingAttributeDiv: boolean -> void
testParsingAttributeDiv =
    String.split "" `<div class="navbar-brand">Hello world</div>`
        |> lex
        |> parse
        |> pageToString
        |> Test.equals `<div class="navbar-brand">Hello world</div>`

testParsingNestedDiv: boolean -> void
testParsingNestedDiv =
    String.split "" "<div><div>Hello</div><div>world</div></div>"
        |> lex
        |> parse
        |> pageToString
        |> Test.equals "<div><div>Hello</div><div>world</div></div>"

testParsingSiblingDiv: boolean -> void
testParsingSiblingDiv =
    String.split "" "<div>Hello</div><div>world</div>"
        |> lex
        |> parse
        |> pageToString
        |> Test.equals "<html><div>Hello</div><div>world</div></html>"

testGeneratingDiv: boolean -> void
testGeneratingDiv =
    String.split "" "<div>Hello world</div>"
        |> lex
        |> parse
        |> generateDerw
        |> Test.equals `div [ ] [ ] [ text "Hello world" ]`

testGeneratingAttributeDiv: boolean -> void
testGeneratingAttributeDiv =
    String.split "" `<div class="navbar-brand">Hello world</div>`
        |> lex
        |> parse
        |> generateDerw
        |> Test.equals `div [ ] [ attribute "class" "navbar-brand" ] [ text "Hello world" ]`

testGeneratingNestedDiv: boolean -> void
testGeneratingNestedDiv =
    String.split "" "<div><div>Hello</div><div>world</div></div>"
        |> lex
        |> parse
        |> generateDerw
        |> Test.equals `div [ ] [ ] [ div [ ] [ ] [ text "Hello" ], div [ ] [ ] [ text "world" ] ]`

testGeneratingSiblingDiv: boolean -> void
testGeneratingSiblingDiv =
    String.split "" "<div>Hello</div><div>world</div>"
        |> lex
        |> parse
        |> generateDerw
        |> Test.equals `html [ ] [ ] [ div [ ] [ ] [ text "Hello" ], div [ ] [ ] [ text "world" ] ]`

testCombineIdentifiers: boolean -> void
testCombineIdentifiers =
    String.split "" `Hello world`
        |> lex
        |> combineIdentifiers
        |> Test.equals {
            left: [ Identifier { value: String.split "" `Hello`}, Space, Identifier { value: String.split "" `world` } ],
            right: []
        }